.row {
  max-width: $grid-width;

  margin: 0 auto; /* auto = when we render the page, the browser will automatically figure out the margin that we want for left and right */

  /* not pseudo class. Everything except the last-child to have a margin-bottom */
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;

  /*Attribute selector
  v: starts with
  *: contains */
  [class^="col-"] {
    float: left;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    /* calc allows us to make calculations, where we can mix units. VERY USEFUL */
    /** Calculations like the width below can happen only when the browser is loaded. e.g. user changes window size */
    /*** In SCSS when doing calculations AND using SCSS variables, we need to include #{VARIABLE} */
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - #{$gutter-horizontal}* 2) / 3);
  }
  .col-2-of-3 {
    width: calc(
      2 * ((100% - #{$gutter-horizontal}* 2) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - #{$gutter-horizontal} * 3) / 4);
  }
  .col-2-of-4 {
    width: calc(
      2 * ((100% - #{$gutter-horizontal} * 3) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      (3 * (100% - #{$gutter-horizontal} * 3) / 4) + 2 *#{$gutter-horizontal}
    );
  }
}
