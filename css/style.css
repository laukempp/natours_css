/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* "basic reset". Universal selector *-element gives the styling to all the elements in the page */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* adding the font-family like this (inherited by all of body's child elements) is better practice than to add it in the universal selector above. */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7; /*1.7 times bigger than it would be without this */
  color: #777;
  padding: 30px; /* adds padding around body. Padding won't be inherited */
}

.header {
  height: 95vh; /* always 95% of the viewport's height */
  background-image: linear-gradient(
      to right,
      rgba(128, 214, 113, 0.801),
      rgba(40, 180, 133, 0.801)
    ),
    url(../img/hero.jpg); /* here we have basically two background images, one on top of another. First is linear-gradient going from first color to the second. Second is the hero-image below it. */
  background-size: cover; /* tries to fit the background fully to the viewport, whatever the width */
  background-position: top; /*when viewport is resized, the top of image stays the same, but bottom gets cropped */
  position: relative;
  clip-path: polygon(
    0 0,
    100% 0,
    100% 85%,
    0 100%
  ); /* makes polygon shaped clip */
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}
.logo {
  height: 35px; /* width will be automatically speficied by browser. If we specify width, then height would be automatically specified by browser. */
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(
    -50%,
    -50%
  ); /* how much we want to translate on X and Y. In this case take 50% of the elements width and height away (use this to center the element) */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden; /* fixes the animation "shaking" that happens at the end sometimes with animations */
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block; /* block-level element occupies the entire width it has available */
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  /*These two below are only properties required for animation to work */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out; /*you can define a movement to a certain part of animation's life-cycle */

  /* how many times the animation will happen
  animation-iteration-count: 3;
  */
  /* timer until the animation starts
  animation-delay: 3s; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  /* For the browser performance it is best to only ever animate two different properties (opacity and transform). But with transform you can do a whole lot. */
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* link is a special state of a selector when it is an anchor element, so it functions as a link */
/** there is also the "visited" state. It is the state when the user has already clicked the btn once before and then sees the btn again. */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
}

.btn:hover {
  transform: translateY(3px);
}

.btn:active {
}

.btn-white {
  background-color: #fff;
  color: #777;
}
